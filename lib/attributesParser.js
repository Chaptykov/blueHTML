module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "itemList": parse_itemList,
        "properties": parse_properties,
        "property": parse_property,
        "propertyKeyWrapper": parse_propertyKeyWrapper,
        "propertyKey": parse_propertyKey,
        "propertyValueWrapper": parse_propertyValueWrapper,
        "propertyValueSingleQuote": parse_propertyValueSingleQuote,
        "propertyValueDoubleQuote": parse_propertyValueDoubleQuote,
        "singleQuotepropertyValues": parse_singleQuotepropertyValues,
        "doubleQuotepropertyValues": parse_doubleQuotepropertyValues,
        "singleQuoteValue": parse_singleQuoteValue,
        "doubleQuoteValue": parse_doubleQuoteValue,
        "handlebars": parse_handlebars,
        "blockHandelbars": parse_blockHandelbars,
        "blockHandelbarsItem": parse_blockHandelbarsItem,
        "handlebarsIfBlock": parse_handlebarsIfBlock,
        "handlebarsEachBlock": parse_handlebarsEachBlock,
        "handlebarsUnlessBlock": parse_handlebarsUnlessBlock,
        "handlebarsIfElseBlock": parse_handlebarsIfElseBlock,
        "handlebarsBlockName": parse_handlebarsBlockName,
        "singleHandlebars": parse_singleHandlebars,
        "params": parse_params,
        "param": parse_param,
        "paramTokenSingleQuote": parse_paramTokenSingleQuote,
        "paramTokenDoubleQuote": parse_paramTokenDoubleQuote,
        "lookUpWords": parse_lookUpWords,
        "word": parse_word,
        "space": parse_space
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "itemList";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_itemList() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_properties();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_space();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_space();
          }
          if (result1 !== null) {
            result2 = parse_itemList();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, ps, s, l) {
        			ps = ps instanceof Array ? ps : [ps];
        
        			//We add the ignored space as they play an important role when setting a property's value
        			//name="prop1{{V1}}" is not the same as name="prop1 {{V1}}"
        			var spaces_obj = {
        				type: 'singleKey'
        			,	subType: 'extraSpaces'
        			,	value: s.join('')
        			};
        
        			return ps.concat(spaces_obj).concat(l);
        		})(pos0, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_handlebars();
          if (result0 !== null) {
            result1 = [];
            result2 = parse_space();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_space();
            }
            if (result1 !== null) {
              result2 = parse_itemList();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, hs, s, l) {
          			hs = hs instanceof Array ? hs : [hs];
          
          			//We add the ignored space as they play an important role when setting a property's value
          			//name="prop1{{V1}}" is not the same as name="prop1 {{V1}}"
          			var spaces_obj = {
          				type: 'singleKey'
          			,	subType: 'extraSpaces'
          			,	value: s.join('')
          			};
          
          			return hs.concat(spaces_obj).concat(l);
          		})(pos0, result0[0], result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            result0 = parse_properties();
            if (result0 === null) {
              result0 = parse_handlebars();
            }
          }
        }
        return result0;
      }
      
      function parse_properties() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_property();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_space();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_space();
          }
          if (result1 !== null) {
            result2 = parse_properties();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, p, s, ps) {
        			//We add the ignored space as they play an important role when setting a property's value
        			//name="prop1{{V1}}" is not the same as name="prop1 {{V1}}"
        			var spaces_obj = {
        				type: 'singleKey'
        			,	subType: 'extraSpaces'
        			,	value: s.join('')
        			};
        
        			return [p].concat(spaces_obj).concat(ps);
        		})(pos0, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = parse_property();
          if (result0 !== null) {
            result0 = (function(offset, p) {
          			return p;
          		})(pos0, result0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_property() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_propertyKeyWrapper();
        if (result0 !== null) {
          result1 = parse_propertyValueWrapper();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, k, v) {
        			if (v)
        			{
        				return {
        					type: 'keyValue'
        				,	key: k.value
        				,	value: v
        				};
        			}
        			return k;
        		})(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_propertyKeyWrapper() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 34) {
          result0 = "\"";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_propertyKey();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 34) {
              result2 = "\"";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, pk) {
        			return pk;
        		})(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 39) {
            result0 = "'";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"'\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_propertyKey();
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 39) {
                result2 = "'";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"'\"");
                }
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, pk) {
          			return pk;
          		})(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            result0 = parse_propertyKey();
          }
        }
        return result0;
      }
      
      function parse_propertyKey() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (/^[^ "'{}=]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[^ \"'{}=]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[^ "'{}=]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[^ \"'{}=]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, keyName) {
        			return {
        				type: "singleKey"
        			,	value: keyName.join('')
        			};
        		})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_propertyValueWrapper() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 61) {
          result0 = "=";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"=\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_propertyValueSingleQuote();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, pv) {
        			return pv;
        		})(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 61) {
            result0 = "=";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_propertyValueDoubleQuote();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, pv) {
          			return pv;
          		})(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_propertyValueSingleQuote() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 39) {
          result0 = "'";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_singleQuotepropertyValues();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 39) {
              result2 = "'";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"'\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, values) {
        			return values;
        		})(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          if (input.substr(pos, 2) === "''") {
            result0 = "''";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"''\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset) {
          			return {
          				type: 'singleValue'
          			,	value: ''
          			};
          		})(pos0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_propertyValueDoubleQuote() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 34) {
          result0 = "\"";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_doubleQuotepropertyValues();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 34) {
              result2 = "\"";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, values) {
        			return values;
        		})(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          if (input.substr(pos, 2) === "\"\"") {
            result0 = "\"\"";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\"\\\"\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset) {
          			return {
          				type: 'singleValue'
          			,	value: ''
          			};
          		})(pos0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_singleQuotepropertyValues() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_singleQuoteValue();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_space();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_space();
          }
          if (result1 !== null) {
            result2 = parse_singleQuotepropertyValues();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v, s, vs) {
        			//We add the ignored space as they play an important role when setting a property's value
        			//name="prop1{{V1}}" is not the same as name="prop1 {{V1}}"
        			var spaces_obj = {
        				type: 'singleKey'
        			,	subType: 'extraSpaces'
        			,	value: s.join('')
        			};
        
        			return v.concat(spaces_obj).concat(vs);
        		})(pos0, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_singleQuoteValue();
          if (result0 !== null) {
            result1 = [];
            result2 = parse_space();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_space();
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, v, s) {
          			//We add the ignored space as they play an important role when setting a property's value
          			//name="prop1{{V1}}" is not the same as name="prop1 {{V1}}"
          			var spaces_obj = {
          				type: 'singleKey'
          			,	subType: 'extraSpaces'
          			,	value: s.join('')
          			};
          
          			v = v instanceof Array ? v : [v];
          
          			return v.concat(spaces_obj);
          		})(pos0, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_doubleQuotepropertyValues() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_doubleQuoteValue();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_space();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_space();
          }
          if (result1 !== null) {
            result2 = parse_doubleQuotepropertyValues();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v, s, vs) {
        			//We add the ignored space as they play an important role when setting a property's value
        			//name="prop1{{V1}}" is not the same as name="prop1 {{V1}}"
        			var spaces_obj = {
        				type: 'singleKey'
        			,	subType: 'extraSpaces'
        			,	value: s.join('')
        			};
        
        			v = v instanceof Array ? v : [v];
        
        			return v.concat(spaces_obj).concat(vs);
        		})(pos0, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_doubleQuoteValue();
          if (result0 !== null) {
            result1 = [];
            result2 = parse_space();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_space();
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, v, s) {
          			//We add the ignored space as they play an important role when setting a property's value
          			//name="prop1{{V1}}" is not the same as name="prop1 {{V1}}"
          			var spaces_obj = {
          				type: 'singleKey'
          			,	subType: 'extraSpaces'
          			,	value: s.join('')
          			};
          
          			v = v instanceof Array ? v : [v];
          
          			return v; //.concat(spaces_obj);
          		})(pos0, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_singleQuoteValue() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (/^[^ '{}]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[^ '{}]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[^ '{}]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[^ '{}]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, valueName) {
        			return {
        				type: 'singleValue'
        			,	value: valueName.join('')
        			};
        		})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_handlebars();
        }
        return result0;
      }
      
      function parse_doubleQuoteValue() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (/^[^ "{}]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[^ \"{}]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[^ "{}]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[^ \"{}]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, valueName) {
        			return {
        				type: 'singleValue'
        			,	value: valueName.join('')
        			};
        		})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_handlebars();
        }
        return result0;
      }
      
      function parse_handlebars() {
        var result0;
        
        result0 = parse_blockHandelbars();
        if (result0 === null) {
          result0 = parse_singleHandlebars();
        }
        return result0;
      }
      
      function parse_blockHandelbars() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_blockHandelbarsItem();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_space();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_space();
          }
          if (result1 !== null) {
            result2 = parse_blockHandelbars();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, h, s, hs) {
        			//We add the ignored space as they play an important role when setting a property's value
        			//name="prop1{{V1}}" is not the same as name="prop1 {{V1}}"
        			var spaces_obj = {
        				type: 'singleKey'
        			,	subType: 'extraSpaces'
        			,	value: s.join('')
        			};
        
        			return [h].concat(spaces_obj).concat(hs);
        		})(pos0, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_blockHandelbarsItem();
        }
        return result0;
      }
      
      function parse_blockHandelbarsItem() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9;
        var pos0, pos1;
        
        result0 = parse_handlebarsIfBlock();
        if (result0 === null) {
          result0 = parse_handlebarsEachBlock();
          if (result0 === null) {
            result0 = parse_handlebarsUnlessBlock();
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.substr(pos, 3) === "{{#") {
                result0 = "{{#";
                pos += 3;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"{{#\"");
                }
              }
              if (result0 !== null) {
                result1 = parse_word();
                if (result1 !== null) {
                  result2 = [];
                  result3 = parse_space();
                  while (result3 !== null) {
                    result2.push(result3);
                    result3 = parse_space();
                  }
                  if (result2 !== null) {
                    result3 = parse_params();
                    result3 = result3 !== null ? result3 : "";
                    if (result3 !== null) {
                      result4 = [];
                      result5 = parse_space();
                      while (result5 !== null) {
                        result4.push(result5);
                        result5 = parse_space();
                      }
                      if (result4 !== null) {
                        if (input.substr(pos, 2) === "}}") {
                          result5 = "}}";
                          pos += 2;
                        } else {
                          result5 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"}}\"");
                          }
                        }
                        if (result5 !== null) {
                          result6 = parse_itemList();
                          if (result6 !== null) {
                            if (input.substr(pos, 3) === "{{/") {
                              result7 = "{{/";
                              pos += 3;
                            } else {
                              result7 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"{{/\"");
                              }
                            }
                            if (result7 !== null) {
                              result8 = parse_word();
                              if (result8 !== null) {
                                if (input.substr(pos, 2) === "}}") {
                                  result9 = "}}";
                                  pos += 2;
                                } else {
                                  result9 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"}}\"");
                                  }
                                }
                                if (result9 !== null) {
                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, openName, params, l, closeName) {
              			return {
              				type: 'handlebars'
              			,	subType: 'GENERICBLOCK'
              			,	value: l
              			,	openTag: openName
              			,	closeTag: closeName
              			,	parameters: params
              			};
              		})(pos0, result0[1], result0[3], result0[6], result0[8]);
              }
              if (result0 === null) {
                pos = pos0;
              }
            }
          }
        }
        return result0;
      }
      
      function parse_handlebarsIfBlock() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 5) === "{{#if") {
          result0 = "{{#if";
          pos += 5;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{#if\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_space();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_space();
          }
          if (result1 !== null) {
            result2 = parse_lookUpWords();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_space();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_space();
              }
              if (result3 !== null) {
                if (input.substr(pos, 2) === "}}") {
                  result4 = "}}";
                  pos += 2;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"}}\"");
                  }
                }
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_space();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_space();
                  }
                  if (result5 !== null) {
                    result6 = parse_itemList();
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_space();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_space();
                      }
                      if (result7 !== null) {
                        result8 = parse_handlebarsIfElseBlock();
                        result8 = result8 !== null ? result8 : "";
                        if (result8 !== null) {
                          result9 = [];
                          result10 = parse_space();
                          while (result10 !== null) {
                            result9.push(result10);
                            result10 = parse_space();
                          }
                          if (result9 !== null) {
                            if (input.substr(pos, 7) === "{{/if}}") {
                              result10 = "{{/if}}";
                              pos += 7;
                            } else {
                              result10 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"{{/if}}\"");
                              }
                            }
                            if (result10 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, condition, s1, ifBody, s2, elseBody, s3) {
        			var condition_obj = {
        					type: 'handlebars'
        				,	subType: ''
        				,	value: condition
        				}
        			,	spaces_obj1 = {
        					type: 'singleKey'
        				,	subType: 'extraSpaces'
        				,	value: s1.join('')
        				}
        			,	spaces_obj2 = {
        					type: 'singleKey'
        				,	subType: 'extraSpaces'
        				,	value: s2.join('')
        				}
        			,	spaces_obj3 = {
        					type: 'singleKey'
        				,	subType: 'extraSpaces'
        				,	value: s3.join('')
        				};
        
        			if (condition.length > 1)
        			{
        				condition_obj.subType = 'LOOKUPSINGLE';
        			}
        			else if (condition[0].indexOf('@') === 0)
        			{
        				condition_obj.subType = 'REFERENCEEVALUATION';
        				condition_obj.value = condition[0];
        			}
        			else
        			{
        				condition_obj.subType = 'SINGLEEVALUATION';
        				condition_obj.value = condition[0];
        			}
        
        			return {
        				type: 'handlebars'
        			,	subType: 'IF'
        			,	condition: condition_obj
        			,	ifBody: [spaces_obj1].concat(ifBody).concat(spaces_obj2)
        			,	elseBody: (elseBody || []).concat(spaces_obj3)
        			};
        		})(pos0, result0[2], result0[5], result0[6], result0[7], result0[8], result0[9]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_handlebarsEachBlock() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 7) === "{{#each") {
          result0 = "{{#each";
          pos += 7;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{#each\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_space();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_space();
          }
          if (result1 !== null) {
            result2 = parse_lookUpWords();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_space();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_space();
              }
              if (result3 !== null) {
                if (input.substr(pos, 2) === "}}") {
                  result4 = "}}";
                  pos += 2;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"}}\"");
                  }
                }
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_space();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_space();
                  }
                  if (result5 !== null) {
                    result6 = parse_itemList();
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_space();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_space();
                      }
                      if (result7 !== null) {
                        result8 = parse_handlebarsIfElseBlock();
                        result8 = result8 !== null ? result8 : "";
                        if (result8 !== null) {
                          result9 = [];
                          result10 = parse_space();
                          while (result10 !== null) {
                            result9.push(result10);
                            result10 = parse_space();
                          }
                          if (result9 !== null) {
                            if (input.substr(pos, 9) === "{{/each}}") {
                              result10 = "{{/each}}";
                              pos += 9;
                            } else {
                              result10 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"{{/each}}\"");
                              }
                            }
                            if (result10 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, iterator, s1, eachBody, s2, elseBody, s3) {
        			var condition_obj = {
        					type: 'handlebars'
        				,	subType: ''
        				,	value: iterator
        				}
        			,	spaces_obj1 = {
        					type: 'singleKey'
        				,	subType: 'extraSpaces'
        				,	value: s1.join('')
        				}
        			,	spaces_obj2 = {
        					type: 'singleKey'
        				,	subType: 'extraSpaces'
        				,	value: s2.join('')
        				}
        			,	spaces_obj3 = {
        					type: 'singleKey'
        				,	subType: 'extraSpaces'
        				,	value: s3.join('')
        				};
        
        			if (iterator.length > 1)
        			{
        				condition_obj.subType = 'LOOKUPSINGLE';
        			}
        			else if (iterator[0].indexOf('@') === 0)
        			{
        				condition_obj.subType = 'REFERENCEEVALUATION';
        				condition_obj.value = iterator[0];
        			}
        			else
        			{
        				condition_obj.subType = 'SINGLEEVALUATION';
        				condition_obj.value = iterator[0];
        			}
        
        			return {
        				type: 'handlebars'
        			,	subType: 'EACH'
        			,	iterator: condition_obj
        			,	eachBody: [spaces_obj1].concat(eachBody).concat(spaces_obj2)
        			,	elseBody: (elseBody || []).concat(spaces_obj3)
        			};
        		})(pos0, result0[2], result0[5], result0[6], result0[7], result0[8], result0[9]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_handlebarsUnlessBlock() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 9) === "{{#unless") {
          result0 = "{{#unless";
          pos += 9;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{#unless\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_space();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_space();
          }
          if (result1 !== null) {
            result2 = parse_lookUpWords();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_space();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_space();
              }
              if (result3 !== null) {
                if (input.substr(pos, 2) === "}}") {
                  result4 = "}}";
                  pos += 2;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"}}\"");
                  }
                }
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_space();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_space();
                  }
                  if (result5 !== null) {
                    result6 = parse_itemList();
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_space();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_space();
                      }
                      if (result7 !== null) {
                        result8 = parse_handlebarsIfElseBlock();
                        result8 = result8 !== null ? result8 : "";
                        if (result8 !== null) {
                          result9 = [];
                          result10 = parse_space();
                          while (result10 !== null) {
                            result9.push(result10);
                            result10 = parse_space();
                          }
                          if (result9 !== null) {
                            if (input.substr(pos, 11) === "{{/unless}}") {
                              result10 = "{{/unless}}";
                              pos += 11;
                            } else {
                              result10 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"{{/unless}}\"");
                              }
                            }
                            if (result10 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, condition, s1, unlessBody, s2, elseBody, s3) {
        			var condition_obj = {
        					type: 'handlebars'
        				,	subType: ''
        				,	value: condition
        				}
        			,	spaces_obj1 = {
        					type: 'singleKey'
        				,	subType: 'extraSpaces'
        				,	value: s1.join('')
        				}
        			,	spaces_obj2 = {
        					type: 'singleKey'
        				,	subType: 'extraSpaces'
        				,	value: s2.join('')
        				}
        			,	spaces_obj3 = {
        					type: 'singleKey'
        				,	subType: 'extraSpaces'
        				,	value: s3.join('')
        				};
        
        			if (condition.length > 1)
        			{
        				condition_obj.subType = 'LOOKUPSINGLE';
        			}
        			else if (condition[0].indexOf('@') === 0)
        			{
        				condition_obj.subType = 'REFERENCEEVALUATION';
        				condition_obj.value = condition[0];
        			}
        			else
        			{
        				condition_obj.subType = 'SINGLEEVALUATION';
        				condition_obj.value = condition[0];
        			}
        
        			return {
        				type: 'handlebars'
        			,	subType: 'UNLESS'
        			,	condition: condition_obj
        			,	unlessBody: [spaces_obj1].concat(unlessBody).concat(spaces_obj2)
        			,	elseBody: (elseBody || []).concat(spaces_obj3)
        			};
        		})(pos0, result0[2], result0[5], result0[6], result0[7], result0[8], result0[9]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_handlebarsIfElseBlock() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 8) === "{{else}}") {
          result0 = "{{else}}";
          pos += 8;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{else}}\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_space();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_space();
          }
          if (result1 !== null) {
            result2 = parse_itemList();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, s, il) {
        			var spaces_obj = {
        					type: 'singleKey'
        				,	subType: 'extraSpaces'
        				,	value: s.join('')
        				};
        
        			return [spaces_obj].concat(il);
        		})(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_handlebarsBlockName() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        if (/^[a-zA-Z]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[a-zA-Z]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[a-zA-Z]");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, name) {
        			return name.join('');
        		})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_singleHandlebars() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "{{") {
          result0 = "{{";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{\"");
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          if (input.substr(pos, 4) === "else") {
            result1 = "else";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"else\"");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result2 = parse_lookUpWords();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_space();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_space();
              }
              if (result3 !== null) {
                result4 = parse_params();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  if (input.substr(pos, 2) === "}}") {
                    result5 = "}}";
                    pos += 2;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"}}\"");
                    }
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v, parameterList) {
        			var result = {
        				type: 'handlebars'
        			,	subType: ''
        			,	value: v
        			,	params: parameterList || []
        			};
        
        			if (!parameterList)
        			{
        				if (v.length > 1)
        				{
        					result.subType = 'CONTEXTLOOKUP';
        				}
        				else if (v[0].indexOf('@') === 0)
        				{
        					result.subType = 'REFERENCEEVALUATION';
        					result.value = v[0]
        				}
        				else
        				{
        					result.subType = 'SAFEEVALUATION';
        					result.value = v[0]
        				}
        			}
        			else
        			{
        				result.subType = 'GENERICSINGLE';
        			}
        
        			return result;
        		})(pos0, result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.substr(pos, 3) === "{{{") {
            result0 = "{{{";
            pos += 3;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"{{{\"");
            }
          }
          if (result0 !== null) {
            pos2 = pos;
            reportFailures++;
            if (input.substr(pos, 4) === "else") {
              result1 = "else";
              pos += 4;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"else\"");
              }
            }
            reportFailures--;
            if (result1 === null) {
              result1 = "";
            } else {
              result1 = null;
              pos = pos2;
            }
            if (result1 !== null) {
              result2 = parse_lookUpWords();
              if (result2 !== null) {
                result3 = [];
                result4 = parse_space();
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_space();
                }
                if (result3 !== null) {
                  result4 = parse_params();
                  result4 = result4 !== null ? result4 : "";
                  if (result4 !== null) {
                    if (input.substr(pos, 3) === "}}}") {
                      result5 = "}}}";
                      pos += 3;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"}}}\"");
                      }
                    }
                    if (result5 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, v, parameterList) {
          			var result = {
          				type: 'handlebars'
          			,	subType: ''
          			,	value: v
          			,	params: parameterList || []
          			};
          
          			if (!parameterList)
          			{
          				if (v.length > 1)
          				{
          					result.subType = 'UNSAFECONTEXTLOOKUP';
          				}
          				else if (v[0].indexOf('@') === 0)
          				{
          					result.subType = 'UNSAFEREFERENCEEVALUATION';
          					result.value = v[0]
          				}
          				else
          				{
          					result.subType = 'UNSAFEEVALUATION';
          					result.value = v[0];
          				}
          			}
          			else
          			{
          				result.subType = 'UNSAFEGENERICSINGLE';
          			}
          
          			return result;
          		})(pos0, result0[2], result0[4]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_params() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_param();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_space();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_space();
          }
          if (result1 !== null) {
            result2 = parse_params();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, p, ps) {
        			return p.concat(ps);
        		})(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_param();
        }
        return result0;
      }
      
      function parse_param() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 39) {
          result0 = "'";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_paramTokenSingleQuote();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_paramTokenSingleQuote();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 39) {
              result2 = "'";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"'\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, ws) {
        			return [{
        				type: 'parameter'
        			,	subType: 'SIMPLEVALUE'
        			,	value: "'" + ws.join('') + "'"
        			}];
        		})(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 34) {
            result0 = "\"";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\"\"");
            }
          }
          if (result0 !== null) {
            result1 = [];
            result2 = parse_paramTokenDoubleQuote();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_paramTokenDoubleQuote();
            }
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 34) {
                result2 = "\"";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\"\"");
                }
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, ws) {
          			return [{
          				type: 'parameter'
          			,	subType: 'SIMPLEVALUE'
          			,	value: '"' + ws.join('') + '"'
          			}];
          		})(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            result0 = parse_lookUpWords();
            if (result0 !== null) {
              result0 = (function(offset, l) {
            			var sub_type = ''
            			if (l.length > 1)
            			{
            				sub_type = 'LOOKUPSINGLE';
            			}
            			else if (l[0].indexOf('@') === 0)
            			{
            				sub_type = 'REFERENCEEVALUATION';
            			}
            			else
            			{
            				sub_type = 'SINGLEEVALUATION';
            			}
            
            			return [{
            				type: 'parameter'
            			,	subType: sub_type
            			,	value: l.length === 1 ? l[0] : l
            			}];
            		})(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
          }
        }
        return result0;
      }
      
      function parse_paramTokenSingleQuote() {
        var result0;
        
        if (input.substr(pos, 2) === "\\'") {
          result0 = "\\'";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\'\"");
          }
        }
        if (result0 === null) {
          if (/^[^']/.test(input.charAt(pos))) {
            result0 = input.charAt(pos);
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("[^']");
            }
          }
        }
        return result0;
      }
      
      function parse_paramTokenDoubleQuote() {
        var result0;
        
        if (input.substr(pos, 2) === "\\\"") {
          result0 = "\\\"";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\\\\"\"");
          }
        }
        if (result0 === null) {
          if (/^[^"]/.test(input.charAt(pos))) {
            result0 = input.charAt(pos);
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("[^\"]");
            }
          }
        }
        return result0;
      }
      
      function parse_lookUpWords() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_word();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 47) {
            result1 = "/";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"/\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_lookUpWords();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, w, ws) {
        			return [w].concat(ws);
        		})(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = parse_word();
          if (result0 !== null) {
            result0 = (function(offset, w) {
          			return [w];
          		})(pos0, result0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_word() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        if (input.charCodeAt(pos) === 47) {
          result0 = "/";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"/\"");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          if (/^[^ '"\/><{}]/.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^ '\"\\/><{}]");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (/^[^ '"\/><{}]/.test(input.charAt(pos))) {
                result2 = input.charAt(pos);
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[^ '\"\\/><{}]");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, w) {
        			return w.join('');
        		})(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_space() {
        var result0;
        
        if (input.charCodeAt(pos) === 32) {
          result0 = " ";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\" \"");
          }
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
