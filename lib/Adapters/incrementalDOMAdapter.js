// @module blueHTML.Adapters
// @class IncrementalDOMAdapter @extend Adapter
var adapter = {
  // @property {String} Name
  name: 'ID',
  // @method defineAttribute
  // @param {CodeGenerationContext} code_generation_context
  // @param {String} object_name Name of the object used to accumulate the result of the code generation process
  // @param {String} property_name Name of the property to define. Please notice that this value will come formatted. This means that if it is a string it will already have its quotes.
  // Besides notice that it can also be a piece of code
  // @return {String}
  defineAttribute: function (code_generation_context, object_name, property_name) {
    'use strict';

    return object_name + '[' + property_name + ']="";';
  },
  // @method setPropertysValue
  // @param {CodeGenerationContext} code_generation_context
  // @param {String} property_definition String generated by the invocation of the method defineProperty
  // @param {String} property_accumulated_values Result of the code generation process applied to all the properties value
  // @return {String}
  setAttributeValue: function (code_generation_context, property_definition, property_accumulated_values) {
    'use strict';

    return property_definition + property_accumulated_values;
  },
  // @method accumulatePropertysValue
  // @param {CodeGenerationContext} code_generation_context
  // @param {String} object_name Name of the object used to accumulate the result of the code generation process
  // @param {String} property_value Value of the property to set
  // @return {String}
  accumulateAttributeValue: function (code_generation_context, object_name, property_value) {
    'use strict';

    return object_name + '["' + code_generation_context.keyName + '"]+=' + property_value + ';';
  }
};

module.exports = adapter;
